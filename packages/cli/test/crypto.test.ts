import { describe, expect, it } from "bun:test";
import { decryptPrivateKey, encryptPrivateKey } from "../src/crypto";

describe("Encryption and Decryption", () => {
  const privateKey = "mySuperSecretPrivateKey";
  const password = "strongPassword123";

  it("should encrypt and decrypt the private key correctly", async () => {
    const encryptedPrivateKey = await encryptPrivateKey(privateKey, password);
    expect(encryptedPrivateKey).toBeTypeOf("string");

    const decryptedPrivateKey = await decryptPrivateKey(
      password,
      encryptedPrivateKey
    );
    expect(decryptedPrivateKey).toEqual(privateKey);
  });

  it("should fail decryption with incorrect password", async () => {
    const encryptedPrivateKey = await encryptPrivateKey(privateKey, password);
    const wrongPassword = "incorrectPassword";

    try {
      await decryptPrivateKey(wrongPassword, encryptedPrivateKey);
    } catch (err: any) {
      expect(err.message).toEqual(
        "Unsupported state or unable to authenticate data"
      );
    }
  });

  it("should successfully decryption from base64", async () => {
    const encryptedPrivateKey =
      "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";
    const decryptedPrivateKey = await decryptPrivateKey(
      "Password?123",
      Buffer.from(encryptedPrivateKey, "base64").toString("base64")
    );
  });
});
